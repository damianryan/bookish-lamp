group = 'com.damianryan'
version = '1.0-SNAPSHOT'
description = """Bookish Lamp"""

buildscript {
    ext {
        kotlin_version = '1.2.51'
        dokka_version = '0.9.16'
    }
    repositories {
        jcenter()
    }
    dependencies() {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: "$kotlin_version"
        classpath group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: "$dokka_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'
apply plugin: 'application'

mainClassName = "canvas.MainKt"
applicationDefaultJvmArgs = ["-Xmx1g"]

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        suppressWarnings = true
        javaParameters = true
        jvmTarget = targetCompatibility
    }
}

test {
    useJUnitPlatform() // use JUnit 5
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

repositories {
    jcenter()
}

ext {
    junit_platform_version = '5.2.0'
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: "$kotlin_version"
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: "$kotlin_version"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junit_platform_version"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junit_platform_version"
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: "$kotlin_version"
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: "$kotlin_version"
}

jar {
    manifest {
        attributes 'Main-Class': 'canvas.MainKt'
    }

    exclude('META-INF/*.SF')
    exclude('META-INF/*.DSA')
    exclude('META-INF/*.RSA')

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
